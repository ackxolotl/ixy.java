// Include all the plugins this module depends on
plugins {
	id 'application'                                                       // Java application plugin
	id 'jacoco'                                                            // Java Code Coverage
	id 'pmd'                                                               // Static code analyzer
	id 'com.github.gmazzo.buildconfig'                    version '1.5.0'  // BuildConfig (like in Android)
	id 'io.freefair.lombok'                               version '3.7.1'  // Lombok
	id 'com.github.spotbugs'                              version '2.0.0'  // Bug finder
	id 'com.github.andygoossens.gradle-modernizer-plugin' version '1.2.0'  // Modernizer plugin
	id 'com.adarshr.test-logger'                          version '1.7.0'  // Gradle Test Logger (more beautiful than the default)
//	id 'com.github.ben-manes.versions'                    version '0.21.0' // Outdated dependencies detection support
}

// Set the entry point of the application
mainClassName = 'de.tum.in.net.ixy.app.Main'

// Configure the group and version of the project, which should match the root project's
group 'de.tum.in.net.ixy'
version '1.0'

// Set the Java compatibility of the source code and the generated artifact
sourceCompatibility = 1.12
targetCompatibility = 1.12

// Use BinTray's jCenter repository, which is faster and bigger than Maven's
repositories {
	jcenter()
}

// Use the latest JaCoCo version if possible => https://www.eclemma.org/jacoco/
jacoco {
	toolVersion = '0.8.4'
}

// Use the latest SpotBugs version if possible => https://github.com/spotbugs/spotbugs/releases
spotbugs {
	toolVersion    = '4.0.0-beta2'
	ignoreFailures = true
	effort         = 'max'
	reportLevel    = 'medium'
}

// Use the latest PMD version if possible => https://pmd.github.io/#downloads
pmd {
	toolVersion    = '6.14.0'
	ignoreFailures = true
}

// Define a set of custom properties which may or may not be useful, but should be inherited from the root project
ext {
	DEBUG     = rootProject.ext.has("DEBUG")     ? rootProject.ext.DEBUG     : false
	OPTIMIZED = rootProject.ext.has("OPTIMIZED") ? rootProject.ext.OPTIMIZED : true
}

// Compute the package name without sequential repetition of the different package levels
def FQPN = { ->
	def mPackages = "${project.group}.ixy.${project.name}".split("\\.")
	def previous = mPackages[0]
	for (int i = 1; i < mPackages.length; i += 1)
		if (mPackages[i] == previous)
			mPackages[i] = null
		else
			previous = mPackages[i]
	Arrays.stream(mPackages).filter(Objects.&nonNull).toArray().join('.')
}.call()

// Configure the BuildConstants class, which will allow the Java compiler to optimize the code at compile time
buildConfig {
	packageName      FQPN
	language         'java'
	buildConfigField 'boolean', 'DEBUG',     "${project.DEBUG}"
	buildConfigField 'boolean', 'OPTIMIZED', "${project.OPTIMIZED}"
}

// Configure the working directory and the standard input
run {
	workingDir = rootProject.projectDir
	standardInput = System.in
}

// Configure the program binary with all the libraries
task uberjar(type: Jar, dependsOn: ["compileJava"]) {
	zip64 = true
	archiveClassifier = 'all'
	manifest {
		attributes 'Main-Class': "${project.mainClassName}",
				   'Implementation-Title': 'Ixy Driver Runner',
				   'Implementation-Version': project.version
	}
	archiveBaseName = "Ixy"
	from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
	with jar
}

// Define the dependencies and the minimum scope needed for them to work
dependencies {
	compile     project(':ixy.generic')
	compile     project(':ixy.generator')
	compile     project(':ixy.forwarder')
	compile     group: 'org.pf4j',       name: 'pf4j',            version: '3.0.1'
	compile     group: 'org.slf4j',      name: 'slf4j-api',       version: '1.8.0-beta4'
	compile     group: 'ch.qos.logback', name: 'logback-classic', version: '1.3.0-alpha4'
	compileOnly group: 'org.jetbrains',  name: 'annotations',     version: '17.0.0'

	testCompileOnly group: 'org.jetbrains',     name: 'annotations',           version: '17.0.0'
	testCompile     group: 'org.junit.jupiter', name: 'junit-jupiter-params',  version: '5.5.0-M1'
	testRuntimeOnly group: 'org.junit.jupiter', name: 'junit-jupiter-engine',  version: '5.5.0-M1'
	testCompile     group: 'org.assertj',       name: 'assertj-core',          version: '3.12.2'
	testCompile     group: 'org.mockito',       name: 'mockito-core',          version: '2.28.2'
	testCompile     group: 'org.mockito',       name: 'mockito-junit-jupiter', version: '2.28.2'
}

// Disable the "@Generated" annotation used by the BuildConfig generated class
tasks.withType(com.github.gmazzo.gradle.plugins.tasks.BuildConfigTask) {
	addGeneratedAnnotation = false
}

// Disable the warning about the Unsafe proprietary API during compilation
tasks.withType(JavaCompile) {
	options.compilerArgs << '-XDignore.symbol.file'
}

// Add the links to the official documentation
tasks.withType(Javadoc) {
	options.links << 'https://docs.oracle.com/en/java/javase/12/docs/api/'
	options.addBooleanOption('html5', true)
	options.noQualifiers 'all'
}

// Export the SpotBugs reports in HTML format only
tasks.withType(com.github.spotbugs.SpotBugsTask) {
	reports {
		html.enabled  = false
		xml.enabled   = false
		text.enabled  = true
		emacs.enabled = false
	}
}

// Exclude the tests that will fail always if no NICs are available
test {
	// Enable JUnit 5 and execute all tests always
	useJUnitPlatform { failFast = false }

	// Use all processor cores to test
	maxParallelForks = Runtime.runtime.availableProcessors()

	// Configure JUnit to execute things in parallel
	systemProperty 'junit.jupiter.execution.parallel.enabled',         true
	systemProperty 'junit.jupiter.execution.parallel.mode.default',    'concurrent'
	systemProperty 'junit.jupiter.execution.parallel.config.strategy', 'dynamic'

	// Configure Gradle's default test logger
	testLogging {
		events = ['passed', 'failed', 'skipped']
		showStandardStreams = true
	}

	// Configure the Gradle Test Logger plugin
	testlogger {
		theme                      'mocha-parallel'
		showExceptions             true
		slowThreshold              2000
		showSummary                true
		showPassed                 true
		showSkipped                true
		showFailed                 true
		showStandardStreams        true
		showPassedStandardStreams  true
		showSkippedStandardStreams true
		showFailedStandardStreams  true
	}
}

// Export the JaCoCo report in HTML format only
jacocoTestReport {
	reports {
		html.enabled = true
		xml.enabled  = true
		csv.enabled  = false
	}
}

// Disable checking the test files
spotbugsTest.enabled = false
pmdTest.enabled = false
