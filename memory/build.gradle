// Include some useful Gradle plugins
plugins {
	id 'java-library' // Java library support
	id 'c'            // C/C++ support
}

// Set the source and target compatibility of this subproject to Java 11
sourceCompatibility = 1.11
targetCompatibility = 1.11

// Configure the C library
model {
	// Define a custom platform which has no operative system but it is x64
	platforms {
		amd64 {
			architecture 'x86-64'
		}
	}
	// Define our components, which will be basically our C library, targeting our custom platform
	// and add to the compiler flags the include paths of the JNI framework
    components {
        ixy(NativeLibrarySpec) {
			targetPlatform 'amd64'
			binaries.all {
				if (targetPlatform.operatingSystem.macOsX) {
					cCompiler.args '-I', "${org.gradle.internal.jvm.Jvm.current().javaHome}/include"
					cCompiler.args '-I', "${org.gradle.internal.jvm.Jvm.current().javaHome}/include/darwin"
					cCompiler.args '-mmacosx-version-min=10.4'
					linker.args '-mmacosx-version-min=10.4'
				} else if (targetPlatform.operatingSystem.linux) {
					cCompiler.args '-I', "${org.gradle.internal.jvm.Jvm.current().javaHome}/include"
					cCompiler.args '-I', "${org.gradle.internal.jvm.Jvm.current().javaHome}/include/linux"
					cCompiler.args '-D_FILE_OFFSET_BITS=64'
				} else if (targetPlatform.operatingSystem.windows) {
					cCompiler.args "-I${org.gradle.internal.jvm.Jvm.current().javaHome}/include"
					cCompiler.args "-I${org.gradle.internal.jvm.Jvm.current().javaHome}/include/win32"
					linker.args "Shlwapi.lib", "Advapi32.lib"
				} else if (targetPlatform.operatingSystem.freeBSD) {
					cCompiler.args '-I', "${org.gradle.internal.jvm.Jvm.current().javaHome}/include"
					cCompiler.args '-I', "${org.gradle.internal.jvm.Jvm.current().javaHome}/include/freebsd"
				}
			}
		}
    }
}

// Define the dependencies and their types (compile, runtime, test, etc.)
dependencies {
	implementation     group: 'org.jetbrains',     name: 'annotations',          version: '16.0.2'
	testImplementation group: 'org.jetbrains',     name: 'annotations',          version: '16.0.2'
	compileOnly        group: 'org.slf4j',         name: 'slf4j-api',            version: '1.8.0-beta4'
	testRuntimeOnly    group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: '5.5.0-M1'
	testCompile        group: 'org.junit.jupiter', name: 'junit-jupiter-params', version: '5.5.0-M1'

	// Add Logback based on if the DEBUG flag is enabled
	if (project.DEBUG) {
		testCompile group: 'ch.qos.logback', name: 'logback-classic', version: '1.2.3'
	} else {
		testCompile group: 'org.slf4j', name: 'slf4j-nop', version: '1.8.0-beta4'
	}
}

// Exclude the tests that will fail always if no NICs are available
test {

	// Add the native library path
	systemProperty 'java.library.path', file("${buildDir}/libs/ixy/shared").absolutePath

	// If debug mode is enabled, configure Logback
	if (project.DEBUG) systemProperty 'logback.configurationFile', 'logback-test.xml'

	// Enable JUnit 5 and execute all tests always
	useJUnitPlatform { failFast = false }

	// Configure Gradle's default test logger
	testLogging {
		events = ['passed', 'failed', 'skipped']
		showStandardStreams = true
	}

	// Configure the Gradle Test Logger plugin
	testlogger {
		theme 'mocha-parallel'
		showExceptions true
		slowThreshold 2000
		showSummary true
		showPassed true
		showSkipped true
		showFailed true
		showStandardStreams true
		showPassedStandardStreams true
		showSkippedStandardStreams true
		showFailedStandardStreams true
	}

	// Make the test depend on the shared library
	dependsOn 'ixySharedLibrary'
}
